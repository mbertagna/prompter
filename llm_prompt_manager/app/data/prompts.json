[
  {
    "title": "Coding Agent Prompt Creation Prompt",
    "description": "A prompt which can be provided to a LLM-based chatbot which has context about a feature to implement. The result of providing this prompt to the chatbot can be passed to a coding agent (e.g., Cursor, Gemini CLI, Claude Code, etc.).",
    "base_prompt": "Implement the specified feature into the codebase. **Focus on conceptual clarity and overall architectural integration**, leaving granular implementation choices and specific low-level logic (e.g., helper functions, specific variable names beyond essential ones) to your discretion. **Avoid providing overly specific implementation details** that limit your freedom, unless absolutely necessary for correct integration.\n\nYour response must strictly adhere to the following structure and content requirements:\n\n### 1. Feature Overview\n\nProvide a **clear and concise conceptual overview** of the feature's purpose, scope, and expected user value.\n\n### 2. Conceptual Breakdown of Codebase Changes (Without Code)\n\nProvide a **comprehensive, high-level conceptual breakdown** of all necessary changes to integrate the feature into the existing codebase structure. This must detail the conceptual roles of new classes, methods, or functions, and which existing components they will interact with or modify. **Avoid writing or suggesting specific code implementation details.** Focus on *what* needs to be done and *where* it fits conceptually.\n\n### 3. Architectural Alignment and Guidance\n\nOffer **specific, high-level guidance** on how these changes align with, and respect, the current architecture (e.g., adherence to design patterns, module separation, data flow conventions). **Emphasize modularity**\u2014each conceptual function should perform a specific, single task.\n\n---\n\n### General Coding Style and Deliverables\n\nAdhere to the following style guidelines in the implemented code:\n\n* **Docstrings:** Use **NumPy docstring format** for all classes, methods, and functions where applicable. Ensure the verbiage is **concise**.\n* **Comments:** **Remove all unnecessary comments.** Only include comments for non-obvious, complex logic if absolutely required for understanding.\n* **Modularity:** Ensure the code is highly modular; each function/method must perform a **specific, single task**.\n* **Emojis:** Avoid the use of emojis.\n\n---\n\n### Context Files\n\nThe following files will be provided as context for accurate and efficient implementation:\n\n* [List of all necessary files (e.g., `src/module_a/file.py`, `tests/test_file.py`, etc.)]",
    "parameters": [],
    "id": "a9410a06-1b44-4fbc-9e26-9e8426faaa4b"
  },
  {
    "title": "Project Spec Builder",
    "description": "A chatbot prompt which can be used to help create a spec for any software project",
    "base_prompt": "**Idea Overview:**\nI want to build a software project that [PROJECT_IDEA].\n\n---\n\n### **Areas to Explore**\n\nBefore creating a detailed specification, I need to understand the following:\n\n* **Purpose and scope** \u2014 what the project should accomplish and who it\u2019s for\n* **Core functionality** \u2014 the main features and capabilities\n* **Technology preferences** \u2014 programming languages, frameworks, tools, or platforms to use\n* **Architecture and infrastructure** \u2014 how components interact, data flow, hosting, and deployment\n* **Integration needs** \u2014 any external systems, APIs, or data sources to connect with\n* **User interaction and interface** \u2014 how users will interact with the system (CLI, GUI, web app, API, etc.)\n* **Performance and scalability** \u2014 expected load, performance goals, and scaling considerations\n* **Security and privacy requirements** \u2014 any specific standards, data protection, or authentication needs\n* **Testing and maintenance** \u2014 expectations for testing, monitoring, or long-term upkeep\n\n---\n\n### **Your Task**\n\n#### **Phase 1: Discovery (Before Building the Specification)**\n\n* Ask **yes/no questions one at a time** to gather information about each of the areas above.\n* **Wait for the user\u2019s response** before asking the next question.\n* Do **not** create or outline the specification yet.\n* When you believe you\u2019ve gathered sufficient details, **propose that you have enough information** and ask the user to confirm before proceeding.\n* Only move to Phase 2 if the user **explicitly agrees** that you have enough information.\n\n#### **Phase 2: Specification (After User Agreement)**\n\n* Create the specification **only after** receiving explicit user confirmation.\n* Do **not** mix questioning with specification writing.\n* Write a **concise, detailed, and structured specification** that accurately reflects all information gathered during Phase 1.\n",
    "parameters": [
      "PROJECT_IDEA"
    ],
    "id": "f3974a6c-3524-4afb-9738-4c1ff01c7f34"
  }
]