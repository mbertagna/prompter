[
  {
    "title": "Test",
    "description": "Test",
    "base_prompt": "Hello { {{name}} }. What are you doing at { {{time}} }?",
    "parameters": [
      "name",
      "time"
    ],
    "id": "e0ef0ed9-cb92-4a05-91b2-99bf9c790e3b"
  },
  {
    "title": "Coding Agent Prompt Creation Prompt",
    "description": "A prompt which can be provided to a LLM-based chatbot which has context about a feature to implement. The result of providing this prompt to the chatbot can be passed to a coding agent (e.g., Cursor, Gemini CLI, Claude Code, etc.).",
    "base_prompt": "Implement the specified feature into the codebase. **Focus on conceptual clarity and overall architectural integration**, leaving granular implementation choices and specific low-level logic (e.g., helper functions, specific variable names beyond essential ones) to your discretion. **Avoid providing overly specific implementation details** that limit your freedom, unless absolutely necessary for correct integration.\n\nYour response must strictly adhere to the following structure and content requirements:\n\n### 1. Feature Overview\n\nProvide a **clear and concise conceptual overview** of the feature's purpose, scope, and expected user value.\n\n### 2. Conceptual Breakdown of Codebase Changes (Without Code)\n\nProvide a **comprehensive, high-level conceptual breakdown** of all necessary changes to integrate the feature into the existing codebase structure. This must detail the conceptual roles of new classes, methods, or functions, and which existing components they will interact with or modify. **Avoid writing or suggesting specific code implementation details.** Focus on *what* needs to be done and *where* it fits conceptually.\n\n### 3. Architectural Alignment and Guidance\n\nOffer **specific, high-level guidance** on how these changes align with, and respect, the current architecture (e.g., adherence to design patterns, module separation, data flow conventions). **Emphasize modularity**\u2014each conceptual function should perform a specific, single task.\n\n---\n\n### General Coding Style and Deliverables\n\nAdhere to the following style guidelines in the implemented code:\n\n* **Docstrings:** Use **NumPy docstring format** for all classes, methods, and functions where applicable. Ensure the verbiage is **concise**.\n* **Comments:** **Remove all unnecessary comments.** Only include comments for non-obvious, complex logic if absolutely required for understanding.\n* **Modularity:** Ensure the code is highly modular; each function/method must perform a **specific, single task**.\n* **Emojis:** Avoid the use of emojis.\n\n---\n\n### Context Files\n\nThe following files will be provided as context for accurate and efficient implementation:\n\n* [List of all necessary files (e.g., `src/module_a/file.py`, `tests/test_file.py`, etc.)]",
    "parameters": [],
    "id": "a9410a06-1b44-4fbc-9e26-9e8426faaa4b"
  }
]